// 1.	Program to print the highest value of N number of values without using an array.


import java.util.*;

class pro1 {
    public static void main(String[] args) {

        int max = 0;
        int num;
        System.out.println("enter the number of elements:");
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        System.out.println("enter the elements :");
        num = sc.nextInt();
        max = num;
        for (int i = 1; i < n; i++) {
            num = sc.nextInt();
            if (num > max) {
                max = num;
            }

        }
        System.out.println("the largest number : " + max);

    }
}

2.	Program to print the least value of N number of values without using an array.

import java.util.*;

public class pro2 {
    public static void main(String[] args) {

        int min = 0;
        int num;
        System.out.println("enter the number of elements:");
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        System.out.println("enter the elements :");
        num = sc.nextInt();
        min = num;
        for (int i = 1; i < n; i++) {
            num = sc.nextInt();
            if (num < min) {
                min = num;
            }

        }
        System.out.println("the smallest number : " + min);

    }

}




3.	 Program to print the second largest of N number of values without using an array.

 import java.util.*;

public class pro3 {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.println("Enter the number of elemenrs : ");
        int n = sc.nextInt();

        System.out.println("Enter number 1");
        int num = sc.nextInt();
        int max = num;
        int max2 = num;
        for (int i = 2; i <= n; i++) {
            System.out.println("Enter number " + i + ":");
            num = sc.nextInt();

            if (num > max) {
                max2 = max;
                max = num;
            } else if (num > max2) {
                max2 = num;
            }

        }
        System.out.println("The largest number : " + max);
        System.out.println("The 2nd largest number : " + max2);
    }
}


4.	 Program to print first N fibonacci series.

import java.util.*;

public class pro4 {
    public static void main(String[] args) {
        System.out.println("Enter a number : ");
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        if (n > 0) {
            int n1 = 1;
            int n2 = 0;
            int n3 = 0;
            System.out.println("Fibonacci series : ");
            for (int i = 0; i < n; i++) {
                System.out.print(n3 + " ");
                n3 = n1 + n2;
                n1 = n2;
                n2 = n3;
            }
        }
    }
}


5.	 Program to print the following pattern program
Input:
	Dlithe
	Dlith
	Dlit
	Dli
	Dl
	D

import java.util.*;

public class pro5 {
    public static void main(String[] args) {
        System.out.println("Enter the word");
        Scanner sc = new Scanner(System.in);
        String str = sc.next();
        // String str = (new java.util.Scanner(System.in)).next();
        char word[] = str.toCharArray();
        int length = str.length();
        System.out.println("Pattern : ");
        for (int i = 0; i < length; i++) {
            for (int j = 0; j < length - i; j++)
                System.out.print(word[j]);
            System.out.println();
        }
    }
}


6.	Program to print the following pattern program
Input:
	Dlithe
	  Dlith
	    Dlit
	     Dli
	      Dl
	       D

import java.util.*;

public class pro6 {
    public static void main(String[] args) {
        System.out.println("Enter the word");
        Scanner sc = new Scanner(System.in);
        String str = sc.next();
        // String str = (new java.util.Scanner(System.in)).next();
        char word[] = str.toCharArray();
        int length = str.length();
        System.out.println("Pattern is: ");
        for (int i = 0; i < length; i++) {
            int index = 0;
            for (int j = 0; j < length; j++) {
                if (j >= i)
                    System.out.print(word[index++]);
                else
                    System.out.print(" ");
            }
            System.out.println();
        }
    }
}

 
7.	 Problem Statement
Our hoary culture had several great persons since time immemorial and king vikramaditya’s nava ratnas (nine gems) belongs to this ilk.They are named in the following shloka:

 


Among these, Varahamihira was an astrologer of eminence and his book Brihat Jataak is recokened as the ultimate authority in astrology.
He was once talking with Amarasimha,another gem among the nava ratnas and the author of Sanskrit thesaurus, Amarakosha.
Amarasimha wanted to know the final position of a person, who starts from the origin 0 0 and travels as per the following scheme.


Scheme
•	He first turns and travels 10 units of distance
•	His second turn is upward for 20 units
•	Third turn is to the left for 30 units
•	Fourth turn is the downward for 40 units
•	Fifth turn is to the right(again) for 50 units
… And thus he travels, every time increasing the travel distance by 10 unit

import java.util.Scanner;

public class pro7 {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.println("enter n: ");
        int n = sc.nextInt();
        int x = 0;
        int y = 0;
        for (int i = 0; i < n; i++) {
            switch (i % 5) {
                case 0:
                    x = x + (i + 1) * 10;
                    break;
                case 1:
                    y = y + (i + 1) * 10;
                    break;
                case 2:
                    x = x - (i + 1) * 10;
                    break;
                case 3:
                    y = y - (i + 1) * 10;
                    break;
                case 4:
                    x = x + (i + 1) * 10;

            }
        }
        System.out.println(x + " " + y);
    }
}

/*
        * output :
        * Case 1:
        * enter n:
        * 3
        * -20 20
        * 
        * Case 2:
        * enter n:
        * 4
        * -20 -20
        * Case 3:
        * enter n:
        * 5
        * 30 -20
        * Case 4:
        * enter n:
        * 6
        * 90 -20
        * Case 1:
        * enter n:
        * 7
        * 90 50
        * 
 */


8 .  Vijay and Dlithe are good friends. They are friends from their childhood. Dlithe born on 08/07/1997. Vijay gives surprise Dlithe for all his birthday. This year he wants to give ornament with the following design to Dlithe. He is not good at design. You are software engineer and he contacts you to design. Kindly help him.
import java.util.*;

public class pro8 {
    public static void main(String args[]) {
        Scanner sc = new Scanner(System.in);
        String str = sc.next();
        // String str = new java.util.Scanner(System.in).next();
        int len = str.length();
        char c[] = str.toCharArray();
        int x = 0;
        for (int i = 1; i < len * 2; i++) {
            if (i == len)
                System.out.println(" ".repeat(x) + c[x] + " ".repeat(x++));
            else
                System.out.println(" ".repeat(x) + c[x] + " ".repeat((len - x) * 2 - 3) + c[x] + " ".repeat(x++));
            if (i >= len)
                x = x - 2;
        }
    }
}

/*
        output:
Dlithe
D         D
 l       l 
  i     i  
   t   t   
    h h    
     e     
    h h    
   t   t   
  i     i  
 l       l 
D         D
 */

	
9.Textile Shop
Problem Statement
Vignesh is working at a textile shop. In that shop a large pile of socks that should be paired by color for sale. Collection of integers specifying the color of each sock, find out how many socks are there without matching colors.
For example, there are n=9 socks with colors ar = {1,2,1,2,1,3,2,4,4}. There is one pair of color 1,  color 2 and color 4. There are three odd socks left, one of each color. The number of pairs is 3.
 Kindly help  him to find out how many socks are there without matching colors in the pile of socks.
import java.util.*;

public class pro9 {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.println("Enter n : ");
        int n = sc.nextInt();
        int i = 0;
        int count = 0;
        System.out.println("Enter array values : ");
        int a[] = new int[n];
        for (i = 0; i < n; i++) {
            a[i] = sc.nextInt();
        }
        Arrays.sort(a);
        for (i = 0; i < n - 1; i++) {
            if (a[i] != a[i + 1])
                count++;
            else
                i++;
        }
        if (i == n - 1)
            count++;
        System.out.println("total number of socks without matching color : " + count);
    }
}

/*  output: 
Enter n : 
8
Enter array values :
10
20
10
10
40
50
40
40
total number of socks without matching color : 4
 */

10.  An automobile company manufactures both a two wheeler (TW) and a four wheeler (FW). A company manager wants to make the production of both types of vehicle according to the given data below:
•	1st data, Total number of vehicle (two-wheeler + four-wheeler)=v
•	2nd data, Total number of wheels = W
The task is to find how many two-wheelers as well as four-wheelers need to manufacture as per the given data.
Example :
Input :
200  -> Value of V
540   -> Value of W
Output :
TW =130 FW=70
Explanation:
130+70 = 200 vehicles
(70*4)+(130*2)= 540 wheels
Constraints :
•	2<=W
•	W%2=0
•	V<W
Print “INVALID INPUT” , if inputs did not meet the constraints.
The input format for testing 
The candidate has to write the code to accept two positive numbers separated by a new line.
•	First Input line – Accept value of V.
•	Second Input line- Accept value for W.
The output format for testing 
•	Written program code should generate two outputs, each separated by a single space character(see the example)
•	Additional messages in the output will result in the failure of test case
•	import java.util.Scanner;
•	
•	public class pro10 {
•	    public static void main(String args[]) {
•	        Scanner sc = new Scanner(System.in);
•	        System.out.println("Enter the total number of vehicles: ");
•	        int v = sc.nextInt();
•	        System.out.println("Enter the total number of wheels: ");
•	        int w = sc.nextInt();
•	
•	        if (w >= 2 && w % 2 == 0 && v < w) {
•	            int fw = (w - 2 * v) / 2;
•	            int tw = v - fw;
•	            System.out.println("No. of two wheelers  : " + tw);
•	            System.out.println("No. of four wheelers : " + fw);
•	        } else {
•	            System.out.println("INVALID INPUT");
•	        }
•	
•	    }
•	}
•	
•	/*
•	 * output 1:
•	 * Enter the total number of vehicles:
•	 * 40
•	 * Enter the total number of wheels:
•	 * 120
•	 * No. of two wheelers : 20
•	 * No. of four wheelers : 20
•	 * 
•	 * output 2.:
•	 * Enter the total number of vehicles:
•	 * 40
•	 * Enter the total number of wheels:
•	 * 121
•	 * INVALID INPUT
•	 */

11.  A supermarket maintains a pricing format for all its products. A value N is printed on each product. When the scanner reads the value N on the item, the product of all the digits in the value N is the price of the item. The task here is to design the software such that given the code of any item N the product (multiplication) of all the digits of value should be computed(price).
Example 1:
Input :
5244 -> Value of N
Output :
160 -> Price 
Explanation:
From the input above 
Product of the digits 5,2,4,4
5*2*4*4= 160
Hence, output is 160

import java.util.*;

public class pro11 {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.println("enter number:");
        String str = sc.next();
        long res = 1;
        int len = str.length();
        for (int i = 0; i < len; i++)
            res *= Character.getNumericValue(str.charAt(i));
        System.out.println("product = " + res);
    }

}

/*
 * output:
 * enter number:
 * 5244
 * product = 160
 */

•	12 .   Problem Statement –
A chocolate factory is packing chocolates into the packets. The chocolate packets here represent an array  of N number of integer values. The task is to find the empty packets(0) of chocolate and push it to the end of the conveyor belt(array).
Example 1 :
N=7 and arr = [4,5,0,1.9,0,5,0].
There are 3 empty packets in the given set. These 3 empty packets represented as O should be pushed towards the end of the array
Input :
7  – Value of N
[4,5,0,1,0,0,5] – Element of arr[O] to arr[N-1],While input each element is separated by newline
Output:
4 5 1 9 5 0 0
Example 2:
Input:
6 — Value of N.
[6,0,1,8,0,2] – Element of arr[0] to arr[N-1], While input each element is separated by newline
Output:
6 1 8 2 0 0
import java.util.Scanner;

public class pro12 {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.println("enter n: ");
        int n = sc.nextInt();
        System.out.println("enter elements in seperate lines:");
        int a[] = new int[n];
        int index1 = 0;
        for (int i = 0; i < n; i++) {
            int in = sc.nextInt();
            if (in != 0)
                a[index1++] = in;
        }
        System.out.println("the arrat: ");
        for (int i = 0; i < n; i++)
            System.out.print(a[i] + " ");
        System.out.println();
    }

}

/*
 * output:
 * enter n:
 * 5
 * enter elements in seperate lines:
 * 2
 * 0
 * 1
 * 0
 * 4
 * the arrat:
 * 2 1 4 0 0
 */

Problem Statement  13

A washing machine works on the principle of Fuzzy System, the weight of clothes put inside it for washing is uncertain. But based on weight measured by sensors, it decides time and water level which can be changed by menus given on the machine control area.  

For low level water, the time estimate is 25 minutes, where approximately weight is between 2000 grams or any nonzero positive number below that.

For medium level water, the time estimate is 35 minutes, where approximately weight is between 2001 grams and 4000 grams.

For high level water, the time estimate is 45 minutes, where approximately weight is above 4000 grams.

Assume the capacity of machine is maximum 7000 grams

Where approximately weight is zero, time estimate is 0 minutes.

Write a program which takes a numeric weight in the range [0,7000] as input and produces estimated time as output. If the input is more than 7000 grams then print “OVERLOADED”, and for all other inputs, the output statement is “INVALID INPUT”.

Input should be in the form of integer value –

<Integer>

Output must have the following format –

Time Estimated:<Integer> Minutes

Example:

Input value
2000

Output value
Time Estimated: 25 minutes

import java.util.Scanner;

public class pro13 {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.println("enter the weight: ");
        int a = sc.nextInt();

        if (a >= 0 && a <= 7000) {
            System.out.print("Time estimated: ");
            if (a == 0) {
                System.out.println("0 minutes");
            } else if (a > 0 && a <= 2000) {
                System.out.println("25 minutes");
            } else if (a >= 2001 && a <= 4000) {
                System.out.println("35 minutes");
            } else if (a > 4000 && a <= 7000) {
                System.out.println("45 minutes");
            }
        } else if (a > 7000) {
            System.out.println("OVERLOADED");
        } else {
            System.out.println("INVALID INPUT");
        }
    }
}

/*
 * output:
 * 0
 * Time estimated: 0 minutes
 * 1
 * Time estimated: 25 minutes
 * 2000
 * Time estimated: 25 minutes
 * 2001
 * Time estimated: 35 minutes
 * 5000
 * Time estimated: 45 minutes
 * 7456
 * OVERLOADED
 * -1
 * INVALID INPUT
 */

Problem Statement - 14
 
 Given a string S(input consisting) of ‘*’ and ‘#’. The length of the string is variable. The task is to find the minimum number of ‘*’ or ‘#’ to make it a valid string. The string is considered valid if the number of ‘*’ and ‘#’ are equal. The ‘*’ and ‘#’ can be at any position in the string.
Note : The output will be a positive or negative integer based on number of ‘*’ and ‘#’ in the input string.
•	(*>#): positive integer
•	(#>*): negative integer
•	(#=*): 0
Example 1:
Input 1:
•	###***   -> Value of S
Output :
•	0   → number of * and # are equal




•	import java.util.Scanner;
•	
•	class pro14 {
•	    public static void main(String args[]) {
•	        Scanner sc = new Scanner(System.in);
•	        System.out.println("Enter String");
•	        String str = sc.next();
•	        int len = str.length();
•	        int count1 = 0, count2 = 0;
•	        char ch[] = new char[len];
•	        for (int i = 0; i < len; i++) {
•	            ch[i] = str.charAt(i);
•	            if (ch[i] == '*')
•	                count1++;
•	            else
•	                count2++;
•	        }
•	        if (count1 > count2)
•	            System.out.println(count1 - count2);
•	        else if (count2 > count1)
•	            System.out.println(count1 - count2);
•	        else
•	            System.out.println(0);
•	    }
•	}
•	
•	/*
•	 * output:
•	 * Enter String
•	 * ####****#*###**#**
•	 * 0
•	 * 
•	 * Enter String
•	 * #***#*##**
•	 * 2
•	 * 
•	 * Enter String
•	 ** ###
•	 * -1
•	 */


Problem Statement 15
Airport security officials have confiscated several item of the passengers at the security check point. All the items have been dumped into a huge box (array). Each item possesses a certain amount of risk[0,1,2]. Here, the risk severity of the items represent an array[] of N number of integer values. The task here is to sort the items based on their levels of risk in the array. The risk values range from 0 to 2.
Example :Input :
7  -> Value of N
[1,0,2,0,1,0,2]-> Element of arr[0] to arr[N-1], while input each element is separated by new line.
Output :0 0 0 1 1 2 2  -> Element after sorting based on risk severity 
Example 2:
input : 10  -> Value of N 
[2,1,0,2,1,0,0,1,2,0] -> Element of arr[0] to arr[N-1], while input each element is separated by a new line.
Output : 
0 0 0 0 1 1 1 2 2 2  ->Elements after sorting based on risk severity.
Explanation:
In the above example, the input is an array of size N consisting of only 0’s, 1’s and 2s. The output is a sorted array from 0 to 2 based on risk severity.
import java.util.*;

public class pro15 {

    public static void main(String args[]) {
        Scanner sc = new Scanner(System.in);
        System.out.println("Enter n");
        int n = sc.nextInt();
        System.out.println("Enter array elements");
        int c1 = 0, c2 = 0;
        for (int i = 0; i < n; i++) {
            int b = sc.nextInt();
            switch (b) {
                case 1:
                    c1++;
                    break;
                case 2:
                    c2++;
            }
        }
        System.out.println("0 ".repeat(n - (c1 + c2)) + "1 ".repeat(c1) +
                "2 ".repeat(c2));
    }
}

/*
 * output:
 * Enter n
 * 6
 * Enter array elements
 * 1
 * 0
 * 2
 * 0
 * 1
 * 2
 * 0 0 1 1 2 2
 */


16.  	Write a program to print the following pattern
Sample Input 
5

Sample Output

A								A
A	B						B	A
A	B	C				C	B	A
A	B	C	D		D	C	B	A
A	B	C	D	E	D	C	B	A

								
import java.util.*;

public class pro19 {
    public static void main(String args[]) {
        int len = new java.util.Scanner(System.in).nextInt();
        char s1[] = new char[len];
        for (int i = 0; i < len; i++)
            s1[i] = (char) ('A' + i);
        int count = 1;
        String inter = new String("A");
        for (int i = 1; i <= len; i++) {
            char s2[] = new char[count];
            if (i == len)
                System.out.printf("%-" + len + "." + (i) + "s" + "%s" + "\n", new String(s1), inter);
            else {
                for (int j = 0; j < i; j++)
                    s2[i - j - 1] = (char) ('A' + j);
                inter = new String(s2);
                System.out.printf("%-" + len + "." + i + "s" + " ".repeat(len - i - 1) + "%s" + "\n", new String(s1),
                        inter);
            }
            if (i != len - 1)
                count++;
        }
    }
}

/*
 * output:
 * 5
 * A        A
 * AB      BA
 * ABC    CBA
 * ABCD  DCBA
 * ABCDEDCBA
 */


17 .	Write a program to print the following pattern
Sample Input 
5

Sample Output

A								A
	B						B	
		C				C		
			D		D			
				E				

import java.util.Scanner;

public class pro20 {
    public static void main(String args[]) {
        int len = new java.util.Scanner(System.in).nextInt();
        char c[] = new char[len];
        for (int i = 0; i < len; i++)
            c[i] = (char) ('A' + i);
        int index = 0;
        for (int i = 0; i < len; i++) {
            if (i == len - 1)
                System.out.println(" ".repeat(i) + c[index]);
            else
                System.out.println(" ".repeat(i) + c[index] + " ".repeat((len - i) * 2 - 3) + c[index++]);
        }
    }
}
/*
 * output:
 5
A       A
 B     B
  C   C
   D D
    E
 */

Problem 18:
Consider the following series: 1, 1, 2, 3, 4, 9, 8, 27, 16, 81, 32, 243, 64, 729, 128, 2187 …
This series is a mixture of 2 series – all the odd terms in this series form a geometric series and all the even terms form yet another geometric series. Write a program to find the Nth term in the series.
The value N in a positive integer that should be read from STDIN. The Nth term that is calculated by the program should be written to STDOUT. Other than value of n th term,no other character / string or message should be written to STDOUT. For example , if N=16, the 16th term in the series is 2187, so only value 2187 should be printed to STDOUT.
You can assume that N will not exceed 30. 
//Program to print Nth term of the series

import java.lang.Math;

public class pro21 {

    public static void main(String[] args) {
        int n = new java.util.Scanner(System.in).nextInt();
        if (n > 0) {
            if (n % 2 != 0)
                System.out.println((int) Math.pow(2, n / 2));
            else
                System.out.println((int) Math.pow(3, n / 2 - 1));
        }
    }

}
/*
 * output:
 * 16
 * 2187
 */

 
Problem 19:
Consider the below series :
0, 0, 2, 1, 4, 2, 6, 3, 8, 4, 10, 5, 12, 6, 14, 7, 16, 8
This series is a mixture of 2 series all the odd terms in this series form even numbers in ascending order and every even terms is derived from the previous  term using the formula (x/2)
Write a program to find the nth term in this series.
The value n in a positive integer that should be read from STDIN the nth term that is calculated by the program should be written to STDOUT. Other than the value of the nth term no other characters /strings or message should be written to STDOUT.
For example if n=10,the 10 th term in the series is to be derived from the 9th term in the series. The 9th term is 8 so the 10th term is (8/2)=4. Only the value 4 should be printed to STDOUT.
You can assume that the n will not exceed 20,000.

public class pro22 {

    public static void main(String[] args) {
        int n = new java.util.Scanner(System.in).nextInt();
        if (n > 0) {
            if (n % 2 == 0)
                System.out.println((n - 2) / 2);
            else
                System.out.println(n - 1);
        }
    }
}

Program 1:
Given a String S, reverse the string without reversing its individual words. Words are separated by dots.

Example 1:
Input:
S = i.like.this.program.very.much
Output: much.very.program.this.like.i
Explanation: After reversing the whole
string(not individual words), the input
string becomes
much.very.program.this.like.i
Example 2:
Input:
S = pqr.mno
Output: mno.pqr
Explanation: After reversing the whole
string , the input string becomes
mno.pqr
Expected Time Complexity: O(|S|)
Expected Auxiliary Space: O(|S|)
Constraints:
1 <= |S| <= 105
 import java.util.StringTokenizer;

public class pro24 {

    public static void main(String[] args) {
        String input = new java.util.Scanner(System.in).nextLine();
        if (input != null) {
            StringTokenizer str = new StringTokenizer(input, ".");
            String output = str.nextToken();
            while (str.hasMoreElements()) {
                output = str.nextToken() + "." + output;
            }
            System.out.println(output);
        }
    }

}


Problem 2:
Write a program to check whether the given string is palindrome or not. 
Sample Input:
Level
Sample Output:
Yes
import java.util.Scanner;

public class pro23 {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String str = sc.next();
        char c[] = str.toUpperCase().toCharArray();
        int len = str.length();
        for (int i = 0; i < len / 2; i++) {
            if (c[i] != c[len - i - 1]) {
                System.out.println("NO");
                return;
            }
        }
        System.out.println("YES");
    }
}

#20-12-2022
A left rotation operation on an array shifts each of the array’s elements unit to the left. For example, if 2 left rotations are performed on array [1, 2, 3, 4, 5], then the array would become [3, 4, 5, 1, 2].
Given an array of integers and a number, , perform left rotations on the array. Return the updated array to be printed as a single line of space-separated integers.


//Program to left shift the array
import java.util.Scanner;

public class leftshift_array {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int d = (sc.nextInt()) % n;
        int a[] = new int[n];
        int t[] = new int[n];
        for (int i = 0; i < n; i++)
            a[i] = t[i] = sc.nextInt();
        if (d > 0) {
            for (int i = 0; i < n; i++) {
                if (i < d)
                    t[n - d + i] = a[i];
                else
                    t[i - d] = a[i];
            }
        }
        for (int i = 0; i < n; i++)
            System.out.print(t[i] + " ");
    }

}
/*
 * input:
 * 20 10
 * 41 73 89 7 10 1 59 58 84 77 77 97 58 1 86 58 26 10 86 51
 * output:
 * 77 97 58 1 86 58 26 10 86 51 41 73 89 7 10 1 59 58 84 77
 */


#26-12-2022

Problem 1:

Program to print sorted non-redundant occurrence of elements from the given input

Sample Input
1 4 4 5 2 5 3

Sample Output
1 2 3 4 5

import java.util.Arrays;
import java.util.Scanner;

public class nonredundant {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.println("enter number of elements:");
        int n = sc.nextInt();
        System.out.println("enter the elements:");
        int a[] = new int[n];
        int d, cnt = 1;
        for (int i = 0; i < n; i++)
            a[i] = sc.nextInt();
        Arrays.sort(a);
        for (int i = 1; i < n; i++)
            if (a[i - 1] != a[i])
                a[cnt++] = a[i];
        System.out.println("sorted:");
        for (int i = 0; i < cnt; i++)
            System.out.print(a[i] + " ");
    }

}
/*
 * input:
 * enter number of elements:
 * 5
 * enter the elements:
 * 2
 * 7
 * 23
 * 1
 * 5
 * 
 * output:
 * sorted :
 * 1 2 5 7 23
 */


Program 2 : program to print the pattern
public class pattern {

    public static void main(String[] args) {
        int n = new java.util.Scanner(System.in).nextInt();
        int cnt = 0;
        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= i * 2 - 1; j++) {
                if (j % 2 != 0)
                    System.out.print(++cnt);
                else
                    System.out.print("*");
            }
            System.out.println();
        }
        for (int i = n; i >= 1; i--) {
            cnt -= i;
            for (int j = 1; j <= i * 2 - 1; j++) {
                if (j % 2 != 0)
                    System.out.print(++cnt);
                else
                    System.out.print("*");
            }
            cnt -= i;
            System.out.println();
        }
    }

}
/*
 * input: 4
 * output:
 * 1
 * 2*3
 * 4*5*6
 * 7*8*9*10
 * 7*8*9*10
 * 4*5*6
 * 2*3
 * 1
 */


#28-12-2022

Program 1:
public class roman_num {

    public static void main(String[] args) {
        String s = new java.util.Scanner(System.in).next();
        int len = s.length();
        int sum = 0;
        char pv = 'I';
        for (int i = len - 1; i > -1; i--) {
            switch (s.charAt(i)) {
                case 'V':
                    sum += 5;
                    pv = s.charAt(i);
                    break;
                case 'L':
                    sum += 50;
                    pv = s.charAt(i);
                    break;
                case 'D':
                    sum += 500;
                    pv = s.charAt(i);
                    break;
                case 'M':
                    sum += 1000;
                    pv = s.charAt(i);
                    break;
                case 'C':
                    if (pv == 'D' || pv == 'M')
                        sum -= 100;
                    else {
                        sum += 100;
                        pv = s.charAt(i);
                    }
                    break;
                case 'X':
                    if (pv == 'L' || pv == 'C')
                        sum -= 10;
                    else {
                        sum += 10;
                        pv = s.charAt(i);
                    }
                    break;
                case 'I':
                    if (pv == 'V' || pv == 'X')
                        sum--;
                    else
                        sum++;
            }
        }
        System.out.println(sum);
    }
}
/*
 * input:
 * MCMXCIV
 * 
 * output:
 * 1994
 */

Program 2:
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class listsum {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.println("Enter n for 1st list");
        int n1 = sc.nextInt();
        System.out.println("Enter the elements of 1st list");
        int num1 = 0;
        for (int i = 0; i < n1; i++)
            num1 = num1 * 10 + sc.nextInt();
        System.out.println("Enter the n for 2nd list");
        int n2 = sc.nextInt();
        System.out.println("Enter the elements of 2nd list");
        int num2 = 0;
        for (int i = 0; i < n2; i++)
            num2 = num2 * 10 + sc.nextInt();
        int sum = num1 + num2;
        List<Integer> list = new ArrayList<Integer>();
        while (sum != 0) {
            list.add(sum % 10);
            sum = sum / 10;
        }
        System.out.print("Result: " + list);
    }
}
/*
 * intput:
 * Enter n for 1st list
 * 3
 * Enter the elements of 1st list
 * 2 4 3
 * Enter the n for 2nd list
 * 3
 * Enter the elements of 2nd list
 * 5 6 4
 * 
 * output:
 * Result: [7, 0, 8]
 */

#27-12-2022
Program 1:
program to perform left rotation on array
import java.util.Scanner;

public class left_rotation {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.println("enter n, number of integers:");
        int n = sc.nextInt();
        System.out.println("enter d, no. of left rotations:");
        int d = (sc.nextInt()) % n;
        System.out.println("enter " + n + " integers:");
        int a[] = new int[n];
        int t[] = new int[n];
        for (int i = 0; i < n; i++)
            a[i] = t[i] = sc.nextInt();
        if (d > 0) {
            for (int i = 0; i < n; i++) {
                if (i < d)
                    t[n - d + i] = a[i];
                else
                    t[i - d] = a[i];
            }
        }
        System.out.println("array after " + d + " shift rotations:");
        for (int i = 0; i < n; i++)
            System.out.print(t[i] + " ");
    }

}
/*
 * input:
 * enter n, number of integers:
 * 5
 * enter d, no. of left rotations:
 * 4
 * enter 5 integers:
 * 1
 * 2
 * 3
 * 4
 * 5
 * output:
 * array after 4 shift rotations:
 * 5 1 2 3 4
 */

Program 2: 
program to reverse the array elements.
import java.util.Scanner;

public class array_reverse {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.println("enter n:");
        int n = sc.nextInt();
        System.out.println("enter elements:");
        int a[] = new int[n];
        for (int i = 0; i < n; i++)
            a[i] = sc.nextInt();
        for (int i = 0; i < n / 2; i++)
            a[i] = a[i] + a[n - i - 1] - (a[n - i - 1] = a[i]);
        for (int i = 0; i < n; i++)
            System.out.print(a[i] + " ");
    }

}
/*
 * input:
 * enter n:
 * 4
 * enter elements:
 * 2
 * 5
 * 1
 * 8
 * 
 * output:
 * 8 1 5 2
 */


#29-12-2022
Program 1:
Program to print the sum of two numbers given in list .
import java.util.Scanner;
import java.util.Stack;

public class sum_no_in_list {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        while (t-- > 0) {
            int n1 = sc.nextInt();
            int n2 = sc.nextInt();
            int num1 = 0;
            for (int i = 0; i < n1; i++)
                num1 = num1 * 10 + sc.nextInt();
            int num2 = 0;
            for (int i = 0; i < n2; i++)
                num2 = num2 * 10 + sc.nextInt();
            int sum = num1 + num2;
            Stack<Integer> stack = new Stack<>();
            while (sum != 0) {
                stack.add(sum % 10);
                sum = sum / 10;
            }
            while (!stack.empty())
                System.out.print(stack.pop() + " ");
        }
    }
}
/*
 * output:
 * in:
 * 2
 * 3 3
 * 4 5 1
 * 3 4 5
 * out:
 * 7 9 6
 * in:
 * 2 2
 * 1 1
 * 1 2
 * out:
 * 2 3
 */


#avalakki

Program 1:
Program to perform string rotation.
import java.util.Arrays;
import java.util.Scanner;

public class str_rotation {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String str = sc.next();
        int len = str.length();
        int n = sc.nextInt();
        char a[] = new char[n];
        int pv = 0;
        for (int i = 0; i < n; i++) {
            char r = sc.next().charAt(0);
            int p = sc.nextInt() % len;
            if (p == 0) {
                a[i] = str.charAt(pv);
                continue;
            }
            if (r == 'L') {
                pv = (pv + p) % len;
                a[i] = str.charAt(pv);
            } else {
                pv = pv - p;
                if (pv < 0)
                    pv = len + pv;
                a[i] = str.charAt(pv);
            }
        }
        Arrays.sort(a);
        for (int i = 0; i < len - n - 1; i++) {
            if (Arrays.equals(a, str.substring(i, i + n).toCharArray())) {
                System.out.println("yes");
                return;
            }
        }
        System.out.println("no");
    }
}
/*
 * output:
 * carrace
 * 3
 * l 2
 * r 2
 * l 3
 * no
 */

